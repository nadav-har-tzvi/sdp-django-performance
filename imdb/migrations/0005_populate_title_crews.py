# Generated by Django 2.2.4 on 2019-08-17 05:00
import csv
import os

import progressbar
from django.conf import settings
from django.db import migrations


DB_BATCH_SIZE = 500000


def populate_title_crews(apps, *args, **kwargs):
    print("Populating title crews")
    Title = apps.get_model('imdb', 'Title')
    CrewMember = apps.get_model('imdb', 'CrewMember')
    Profession = apps.get_model('imdb', 'Profession')
    TitleCrew = apps.get_model('imdb', 'TitleCrew')
    profession_by_name = {p.name: p for p in Profession.objects.all()}
    num_scanned = 0
    with open(os.path.join(settings.IMDB_DATASET_LOCATION, 'title.principals.tsv')) as f:
        reader = csv.DictReader(f, delimiter='\t')
        bar = progressbar.progressbar(reader)
        title_crews = []
        titles = set()
        members = set()
        for row in bar:
            row['nconst'] = nconst = int(row['nconst'].strip('nm'))
            row['tconst'] = tconst = int(row['tconst'].strip('tt'))
            title_crews.append(row)
            titles.add(tconst)
            members.add(nconst)

            num_scanned += 1
            if num_scanned == DB_BATCH_SIZE:
                title_by_tconst = {t.tconst: t for t in Title.objects.filter(tconst__in=titles)}
                member_by_nconst = {m.nconst: m for m in CrewMember.objects.filter(nconst__in=members)}
                title_crews_batch = []
                for title_crew_details in title_crews:
                    tconst = title_crew_details['tconst']
                    nconst = title_crew_details['nconst']
                    category = title_crew_details.pop('category')
                    try:
                        profession = profession_by_name[category]
                    except KeyError:
                        profession_by_name[category] = Profession(name=category)
                        profession_by_name[category].save()
                        profession = profession_by_name[category]

                    try:
                        title_crews_batch.append(TitleCrew(
                            title=title_by_tconst[tconst],
                            member=member_by_nconst[nconst],
                            ordering=title_crew_details['ordering'],
                            category=profession,
                            characters=title_crew_details['characters']
                        ))
                    except KeyError:
                        pass
                TitleCrew.objects.bulk_create(title_crews_batch)
                title_crews_batch.clear()
                members.clear()
                titles.clear()
                title_crews.clear()
                num_scanned = 0
        else:
            TitleCrew.objects.bulk_create(title_crews_batch)
            title_crews_batch.clear()
            members.clear()
            titles.clear()
            title_crews.clear()

def truncate_title_crews(apps, *args, **kwargs):
    TitleCrew = apps.get_model('imdb', 'TitleCrew')
    TitleCrew.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('imdb', '0004_populate_titles'),
    ]

    operations = [
        migrations.RunPython(populate_title_crews, truncate_title_crews)
    ]
