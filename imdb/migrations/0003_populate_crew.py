# Generated by Django 2.2.4 on 2019-08-17 04:58
import csv
import os

import progressbar
from django.db import migrations


DB_BATCH_SIZE = 500000


def populate_crew(apps, *args, **kwargs):
    print("Populating crew members")
    CrewMember = apps.get_model('imdb', 'CrewMember')
    Profession = apps.get_model('imdb', 'Profession')
    CrewMemberProfession = apps.get_model('imdb', 'CrewMemberProfession')
    crew_professions_by_name = {p.name: p for p in Profession.objects.all()}
    crew_members_batch = []
    professions_by_crew_member = {}
    num_batches_persisted = 0
    with open(os.path.expanduser('~/Downloads/name.basics.tsv'), encoding='utf-8') as f:
        reader = csv.DictReader(f, delimiter='\t')
        bar = progressbar.progressbar(reader)
        for row in bar:
            professions = [p for p in row.pop('primaryProfession').split(',') if len(p) > 0]
            row.pop('knownForTitles').split(',')
            name = row['primary_name']
            birth_year = int(row['birth_year']) if row['birth_year'].isnumeric() else None
            death_year = int(row['death_year']) if row['death_year'].isnumeric() else None
            nconst = int(row['nconst'].strip('nm'))
            member = CrewMember(nconst=nconst, primary_name=name, birth_year=birth_year, death_year=death_year)
            crew_members_batch.append(member)
            member_profressions = [crew_professions_by_name[profession] for profession in professions]
            professions_by_crew_member[member.nconst] = member_profressions
            if len(crew_members_batch) == DB_BATCH_SIZE:
                CrewMember.objects.bulk_create(crew_members_batch)
                members = CrewMember.objects.filter(nconst__in=professions_by_crew_member.keys())
                crew_member_professions = []
                for member in members:
                    member_profressions = professions_by_crew_member[member.nconst]
                    crew_member_professions.extend(
                        CrewMemberProfession(profession=profession, member=member)
                        for profession in member_profressions
                    )
                CrewMemberProfession.objects.bulk_create(crew_member_professions)
                num_batches_persisted += 1
                crew_members_batch.clear()
                professions_by_crew_member.clear()
                crew_member_professions.clear()


def truncate_crew(apps, *args, **kwargs):
    CrewMemberProfession = apps.get_model('imdb', 'CrewMemberProfession')
    CrewMember = apps.get_model('imdb', 'CrewMember')
    CrewMemberProfession.objects.all().delete()
    CrewMember.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('imdb', '0002_populate_enums'),
    ]

    operations = [
        migrations.RunPython(populate_crew, truncate_crew)
    ]
